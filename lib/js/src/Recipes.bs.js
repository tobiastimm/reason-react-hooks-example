// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Css = require("bs-css/lib/js/src/Css.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonApollo = require("reason-apollo/lib/js/src/ReasonApollo.bs.js");

var recipeList = Css.style(/* :: */[
      Css.listStyleType(/* none */-922086728),
      /* :: */[
        Css.display(/* grid */-999565626),
        /* :: */[
          Css.gridTemplateColumns(/* :: */[
                /* `repeat */[
                  108828507,
                  /* tuple */[
                    /* autoFill */652328338,
                    /* `minmax */[
                      -754859950,
                      /* tuple */[
                        Css.rem(30),
                        Css.fr(1)
                      ]
                    ]
                  ]
                ],
                /* [] */0
              ]),
          /* :: */[
            Css.gridGap(Css.rem(2.5)),
            /* :: */[
              Css.gridAutoRows(Css.rem(30)),
              /* [] */0
            ]
          ]
        ]
      ]
    ]);

var Styles = /* module */[/* recipeList */recipeList];

var ppx_printed_query = "query getRecipes  {\nrecipes  {\nid  \ntitle  \ndescription  \nupdatedAt  \ncreatedAt  \nimages  {\nstatus  \nupdatedAt  \ncreatedAt  \nid  \nhandle  \nfileName  \nheight  \nwidth  \nsize  \nmimeType  \n}\n\n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "recipes");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeArray(value$1);
      tmp = match$2 !== undefined ? match$2.map((function (value) {
                var match = Js_json.decodeNull(value);
                if (match !== undefined) {
                  return undefined;
                } else {
                  var match$1 = Js_json.decodeObject(value);
                  var tmp;
                  if (match$1 !== undefined) {
                    var value$1 = Caml_option.valFromOption(match$1);
                    var match$2 = Js_dict.get(value$1, "id");
                    var tmp$1;
                    if (match$2 !== undefined) {
                      var value$2 = Caml_option.valFromOption(match$2);
                      var match$3 = Js_json.decodeString(value$2);
                      tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                    } else {
                      tmp$1 = Js_exn.raiseError("graphql_ppx: Field id on type Recipe is missing");
                    }
                    var match$4 = Js_dict.get(value$1, "title");
                    var tmp$2;
                    if (match$4 !== undefined) {
                      var value$3 = Caml_option.valFromOption(match$4);
                      var match$5 = Js_json.decodeString(value$3);
                      tmp$2 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                    } else {
                      tmp$2 = Js_exn.raiseError("graphql_ppx: Field title on type Recipe is missing");
                    }
                    var match$6 = Js_dict.get(value$1, "description");
                    var tmp$3;
                    if (match$6 !== undefined) {
                      var value$4 = Caml_option.valFromOption(match$6);
                      var match$7 = Js_json.decodeNull(value$4);
                      if (match$7 !== undefined) {
                        tmp$3 = undefined;
                      } else {
                        var match$8 = Js_json.decodeString(value$4);
                        tmp$3 = match$8 !== undefined ? match$8 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                      }
                    } else {
                      tmp$3 = undefined;
                    }
                    var match$9 = Js_dict.get(value$1, "updatedAt");
                    var match$10 = Js_dict.get(value$1, "createdAt");
                    var match$11 = Js_dict.get(value$1, "images");
                    var tmp$4;
                    if (match$11 !== undefined) {
                      var value$5 = Caml_option.valFromOption(match$11);
                      var match$12 = Js_json.decodeNull(value$5);
                      if (match$12 !== undefined) {
                        tmp$4 = undefined;
                      } else {
                        var match$13 = Js_json.decodeArray(value$5);
                        tmp$4 = match$13 !== undefined ? match$13.map((function (value) {
                                  var match = Js_json.decodeObject(value);
                                  if (match !== undefined) {
                                    var value$1 = Caml_option.valFromOption(match);
                                    var match$1 = Js_dict.get(value$1, "status");
                                    var tmp;
                                    if (match$1 !== undefined) {
                                      var value$2 = Caml_option.valFromOption(match$1);
                                      var match$2 = Js_json.decodeString(value$2);
                                      if (match$2 !== undefined) {
                                        var value$3 = match$2;
                                        switch (value$3) {
                                          case "ARCHIVED" : 
                                              tmp = /* ARCHIVED */-957086110;
                                              break;
                                          case "DRAFT" : 
                                              tmp = /* DRAFT */-576421631;
                                              break;
                                          case "PUBLISHED" : 
                                              tmp = /* PUBLISHED */-1003705458;
                                              break;
                                          default:
                                            tmp = Js_exn.raiseError("graphql_ppx: Unknown enum variant for Status: " + value$3);
                                        }
                                      } else {
                                        tmp = Js_exn.raiseError("graphql_ppx: Expected enum value for Status, got " + JSON.stringify(value$2));
                                      }
                                    } else {
                                      tmp = Js_exn.raiseError("graphql_ppx: Field status on type Asset is missing");
                                    }
                                    var match$3 = Js_dict.get(value$1, "updatedAt");
                                    var match$4 = Js_dict.get(value$1, "createdAt");
                                    var match$5 = Js_dict.get(value$1, "id");
                                    var tmp$1;
                                    if (match$5 !== undefined) {
                                      var value$4 = Caml_option.valFromOption(match$5);
                                      var match$6 = Js_json.decodeString(value$4);
                                      tmp$1 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                                    } else {
                                      tmp$1 = Js_exn.raiseError("graphql_ppx: Field id on type Asset is missing");
                                    }
                                    var match$7 = Js_dict.get(value$1, "handle");
                                    var tmp$2;
                                    if (match$7 !== undefined) {
                                      var value$5 = Caml_option.valFromOption(match$7);
                                      var match$8 = Js_json.decodeString(value$5);
                                      tmp$2 = match$8 !== undefined ? match$8 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
                                    } else {
                                      tmp$2 = Js_exn.raiseError("graphql_ppx: Field handle on type Asset is missing");
                                    }
                                    var match$9 = Js_dict.get(value$1, "fileName");
                                    var tmp$3;
                                    if (match$9 !== undefined) {
                                      var value$6 = Caml_option.valFromOption(match$9);
                                      var match$10 = Js_json.decodeString(value$6);
                                      tmp$3 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
                                    } else {
                                      tmp$3 = Js_exn.raiseError("graphql_ppx: Field fileName on type Asset is missing");
                                    }
                                    var match$11 = Js_dict.get(value$1, "height");
                                    var tmp$4;
                                    if (match$11 !== undefined) {
                                      var value$7 = Caml_option.valFromOption(match$11);
                                      var match$12 = Js_json.decodeNull(value$7);
                                      if (match$12 !== undefined) {
                                        tmp$4 = undefined;
                                      } else {
                                        var match$13 = Js_json.decodeNumber(value$7);
                                        tmp$4 = match$13 !== undefined ? match$13 : Js_exn.raiseError("graphql_ppx: Expected float, got " + JSON.stringify(value$7));
                                      }
                                    } else {
                                      tmp$4 = undefined;
                                    }
                                    var match$14 = Js_dict.get(value$1, "width");
                                    var tmp$5;
                                    if (match$14 !== undefined) {
                                      var value$8 = Caml_option.valFromOption(match$14);
                                      var match$15 = Js_json.decodeNull(value$8);
                                      if (match$15 !== undefined) {
                                        tmp$5 = undefined;
                                      } else {
                                        var match$16 = Js_json.decodeNumber(value$8);
                                        tmp$5 = match$16 !== undefined ? match$16 : Js_exn.raiseError("graphql_ppx: Expected float, got " + JSON.stringify(value$8));
                                      }
                                    } else {
                                      tmp$5 = undefined;
                                    }
                                    var match$17 = Js_dict.get(value$1, "size");
                                    var tmp$6;
                                    if (match$17 !== undefined) {
                                      var value$9 = Caml_option.valFromOption(match$17);
                                      var match$18 = Js_json.decodeNull(value$9);
                                      if (match$18 !== undefined) {
                                        tmp$6 = undefined;
                                      } else {
                                        var match$19 = Js_json.decodeNumber(value$9);
                                        tmp$6 = match$19 !== undefined ? match$19 : Js_exn.raiseError("graphql_ppx: Expected float, got " + JSON.stringify(value$9));
                                      }
                                    } else {
                                      tmp$6 = undefined;
                                    }
                                    var match$20 = Js_dict.get(value$1, "mimeType");
                                    var tmp$7;
                                    if (match$20 !== undefined) {
                                      var value$10 = Caml_option.valFromOption(match$20);
                                      var match$21 = Js_json.decodeNull(value$10);
                                      if (match$21 !== undefined) {
                                        tmp$7 = undefined;
                                      } else {
                                        var match$22 = Js_json.decodeString(value$10);
                                        tmp$7 = match$22 !== undefined ? match$22 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$10));
                                      }
                                    } else {
                                      tmp$7 = undefined;
                                    }
                                    return {
                                            status: tmp,
                                            updatedAt: match$3 !== undefined ? Caml_option.valFromOption(match$3) : Js_exn.raiseError("graphql_ppx: Field updatedAt on type Asset is missing"),
                                            createdAt: match$4 !== undefined ? Caml_option.valFromOption(match$4) : Js_exn.raiseError("graphql_ppx: Field createdAt on type Asset is missing"),
                                            id: tmp$1,
                                            handle: tmp$2,
                                            fileName: tmp$3,
                                            height: tmp$4,
                                            width: tmp$5,
                                            size: tmp$6,
                                            mimeType: tmp$7
                                          };
                                  } else {
                                    return Js_exn.raiseError("graphql_ppx: Object is not a value");
                                  }
                                })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$5));
                      }
                    } else {
                      tmp$4 = undefined;
                    }
                    tmp = {
                      id: tmp$1,
                      title: tmp$2,
                      description: tmp$3,
                      updatedAt: match$9 !== undefined ? Caml_option.valFromOption(match$9) : Js_exn.raiseError("graphql_ppx: Field updatedAt on type Recipe is missing"),
                      createdAt: match$10 !== undefined ? Caml_option.valFromOption(match$10) : Js_exn.raiseError("graphql_ppx: Field createdAt on type Recipe is missing"),
                      images: tmp$4
                    };
                  } else {
                    tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
                  }
                  return Caml_option.some(tmp);
                }
              })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$1));
    } else {
      tmp = Js_exn.raiseError("graphql_ppx: Field recipes on type Query is missing");
    }
    return {
            recipes: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function makeWithVariables(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function ret_type(f) {
  return /* module */[];
}

var MT_Ret = /* module */[];

var GetRecipes = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var GetRecipesQuery = ReasonApollo.CreateQuery([
      ppx_printed_query,
      parse
    ]);

function Recipes(Props) {
  var recipesQuery = make(/* () */0);
  return React.createElement("ul", {
              className: recipeList
            }, React.createElement(GetRecipesQuery[/* make */4], {
                  variables: recipesQuery.variables,
                  children: (function (param) {
                      var result = param[/* result */0];
                      if (typeof result === "number") {
                        return React.createElement("div", undefined, "Loading");
                      } else if (result.tag) {
                        console.log(result[0].recipes);
                        return React.createElement("div", undefined);
                      } else {
                        return React.createElement("div", undefined, result[0].message);
                      }
                    })
                }));
}

var make$1 = Recipes;

exports.Styles = Styles;
exports.GetRecipes = GetRecipes;
exports.GetRecipesQuery = GetRecipesQuery;
exports.make = make$1;
/* recipeList Not a pure module */
